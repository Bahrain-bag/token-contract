cell pack_wallet_data (int balance, slice owner, slice jetton_master, cell token_wallet_code) inline {
   return  begin_cell()
            .store_grams(balance)
            .store_slice(owner)
            .store_slice(jetton_master)
            .store_ref(token_wallet_code)
           .end_cell();
}

cell calculate_token_state_init (slice owner, slice jetton_master, cell code) inline {
  return begin_cell()
          .store_uint(0,2)
          .store_dict(code)
          .store_dict(pack_wallet_data(0, owner, jetton_master, code))
          .store_uint(0,1)
         .end_cell();
}

slice calc_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain, 8)
                     .store_uint(
                       cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

(slice) calc_user_wallet (slice owner, slice jetton_master, cell code) inline {
  return calc_address(calculate_token_state_init(owner, jetton_master, code));
}

