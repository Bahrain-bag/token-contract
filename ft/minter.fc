int equal_slices (slice s1, slice s2) asm "SDEQ";

{-
  storage#_ supply:Coins controller:MsgAddress content:^Cell token_wallet_code:^Cell = Storage;
-}

(int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_coins(), ds~load_msg_addr(), ds~load_ref(), ds~load_ref());
}

() save_data(int supply, slice admin, cell content, cell token_wallet_code) impure inline {
  set_data(begin_cell()
            .store_coins(supply)
            .store_slice(admin)
            .store_ref(content)
            .store_ref(token_wallet_code)
           .end_cell()
          );
}


() mint_tokens (slice to, int amount, cell token_wallet_code) impure {
  cell state_init = calculate_token_state_init(to, my_address(), token_wallet_code);
  slice to_wallet = calc_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet)
    .store_coins(40000000)
    .store_uint(4 + 2 + 0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_uint(op::master_request(), 32)
    .store_uint(cur_lt(), 64)
    .store_coins(amount);
  send_raw_message(msg.end_cell(), 0);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {

  slice cs = in_msg_cell.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }
  slice sender = cs~load_msg_addr();
  
  int op = in_msg~load_uint(32);
  int query_id = in_msg~load_uint(64);

  (int supply, slice admin, cell content, cell token_wallet_code) = load_data();
  if(op == op::mint()) {
    throw_unless(73, equal_slices(sender,admin));
    int amount = in_msg~load_coins();
    slice destination = in_msg~load_msg_addr();
    mint_tokens(destination, amount, token_wallet_code);
    save_data(supply + amount, admin, content, token_wallet_code);
    return ();
  }
  if(op == op::burn_notification()) {
    int amount = in_msg~load_coins();
    slice from = in_msg~load_msg_addr();
    throw_unless(707,
        equal_slices(calc_user_wallet(from, my_address(), token_wallet_code), sender)
    );
    save_data(supply - amount, admin, content, token_wallet_code);
    return ();
  }
  throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
  (int supply, slice admin, cell content, cell token_wallet_code) = load_data();
  return (supply, -1, admin, content, token_wallet_code);
}
